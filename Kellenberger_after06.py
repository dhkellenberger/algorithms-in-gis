#after 06
def midpoints(li): # given a list of lists of n points [[x1,y1],[x2,y2]...]), 
    #compute the mid (X,Y) - using a while iteration or numpy
    #return: a tuple containing the mid x and mid y
    #example: midpoints([[1,1],[3,1],[3,3],[1,3]]) returns (2.0, 2.0)
    
    import numpy as np
    
    x_list = []
    y_list = []
    i = 0
    
    while i < len(li):
        j = li[i]
        x_list.append(j[0])
        y_list.append(j[1])
        i += 1
        
    x = np.mean(x_list)
    y = np.mean(y_list)
        
    return (x, y)
 

def median(li):  # compute the median value from a 1D list
    #return the median value or upper median if even number of values
    #example: median([1,3,5,7,9]) returns 5, median([1,3,5,7,9,10]) returns 7
    
    import numpy as np
    
    if len(li) % 2 != 0:
        med = int(np.median(li))
        return med
    else:
        li.sort()
        i = int(len(li)/2)
        return li[i]

def elist(li):  # edits each member of a list of strings by concatenating 'edited ' to the front.
    #return: the new edited list
    #example: elist(['Geography','GIS']) returns ['edited Geography', 'edited GIS']
    
    i = 0
    
    while i < len(li):
        li[i] = "edited " + li[i]
        i += 1
        
    return li


def lwhere(s,l): # returns a list of the positions of all occurences of a letter in a string
    #return a list of the indexes
    #example: lwhere('beekeeper','e') returns [1, 2, 4, 5, 7]
    
    found = []
    i = 0
    
    while i < len(s) - 1:
        if s[i] == l:
            found.append(i)
        i += 1
        
    return found

def flips(n):  #create a list of "n" coin flips (1=tails, 2=heads) 
    #this function serves to create data for you next two, and is not graded
    #return the list
    #example flips(8) returns a  list of eight flips [1, 2, 2, 1, 2, 2, 2, 1]
    import random
    #create the series
    
    results = []
    i = 0
    
    while i <= n:
        flip = random.randint(1, 2)
        results.append(flip)
        i += 1
    
    return results
   

def heads(f): #count the percentage of "heads" in a list externally created by the flips function,
    #pass the list generated by flips (f)  DO NOT CALL FLIPS FROM THIS FUNCTION
    #return the percentage as a float and the list
    #example heads(f) returns a number and the list (0.4166666666666667, [1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 1])
    
    yes = 0
    
    for i in f:
        if i == 2:
            yes += 1
 
    avg = yes / len(f)
 
    return (avg, f)

def flipsrow(f): #pass a list of flips from flips(f) DO NOT CALL FLIPS FROM THIS FUNCTION
    #count how many flips it takes until you get 5 heads or 5 tails in a row, stop at that point 
    #return the number and the list
    #example: flipsrow(f) returns an index where the consecutive flips started and the list of flips
    #(7, [1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1,...])
    
    cons = 1
    counter = 0
    j = 0
    i = 0
    
    while i < len(f):
        if f[i] == cons:
            j = i
            counter += 1
            i += 1
            if counter == 5:
                return (j, f)
        else:
            counter = 0
            cons = f[i]
    
    return (j, f)

def shuffle(): #create a shuffled deck of 52 cards  No card can be repeated in the final deck
    #this function serves to create data for you next two, and is not graded
    #return the deck as a list of cards starting from the original unshuffled cards below (note that 10 is coded as 1)
    #this function will support testing of the last two in this practice and save you coding time

    #example: shuffle() might return ['3d', '2c', '2s', '4s', 'qc', '5h', 'ac', 'jd', '4h', '4d', '8s', '5d', ...]

    #Unshuffled cards are stored in the list below (c - clubs, d - diamonds, h- hearts, s-spades)

    cards=['2c','3c','4c','5c','6c','7c','8c','9c','1c','jc','qc','kc','ac',\
           '2d','3d','4d','5d','6d','7d','8d','9d','1d','jd','qd','kd','ad',\
           '2h','3h','4h','5h','6h','7h','8h','9h','1h','jh','qh','kh','ah',\
           '2s','3s','4s','5s','6s','7s','8s','9s','1s','js','qs','ks','as']
    
    #create a shuffled deck - without replacement and return the list containing it
    
    import random
    
    random.shuffle(cards)
    
    return cards

def suits(deck): #pass a 'deck' from shuffle() which returns a shuffled deck of 52 cards,
    # DO NOT CALL SHUFFLE FROM THIS FUNCTION
    #each player gets 26 cards dealt one to each such that 
    #player 1 gets "even" cards 0,2,4,6,8,...50   player 2 gets "odd" cards 1,3,5,7,9, ...51
    #in a random deal all suits would be about equally represented in both hands.
    #return the number of cards in each suit in each hand in a list in this order
    #(clubs(c), diamonds(d), hearts(h), and spades(s)), also return the hands of player 1 and player 2
    
    #example: suits() might return (list of suit counts for p1, list of suit counts for p2, hand for p1, hand for p2)
    #([9, 7, 5, 5], [4, 6, 8, 8], 'jd5ckcacqh1d3cjc6h1hkd7d7cjs3h8s9sas4c2d4s4d1cah9d2c', 
    #'5d9c8d1sqd9hadks8h6s5h2hkh6cqc8c5s3d7s3sqs6djh2s7h4h')
    
    p1 = []
    p1_by_suit = [0, 0, 0, 0]
    p2 = []
    p2_by_suit = [0, 0, 0, 0]
    i = 0
    
    while i < len(deck):
        if i % 2 != 0:
            p1.append(deck[i])
            i += 1
        else:
            p2.append(deck[i])
            i += 1
            
    for i in p1:
        if "c" in i:
            p1_by_suit[0] += 1
        elif "d" in i:
            p1_by_suit[1] += 1
        elif "h" in i:
            p1_by_suit[2] += 1
        elif "s" in i:
            p1_by_suit[3] += 1
            
    for i in p2:
        if "c" in i:
            p2_by_suit[0] += 1
        elif "d" in i:
            p2_by_suit[1] += 1
        elif "h" in i:
            p2_by_suit[2] += 1
        elif "s" in i:
            p2_by_suit[3] += 1
    
    return (p1_by_suit, (p2_by_suit), ''.join(p1), ''.join(p2))


def superwar(deck):   #pass a 'deck' from shuffle() which returns a shuffled deck of 52 cards, 
    # DO NOT CALL SHUFFLE FROM THIS FUNCTION
    #player 1 gets "even" cards 0,2,4,6,8,...50 and   player 2 gets "odd" cards 1,3,5,7,9, ...51
    #count the game score as follows: number cards (02-10) count that value, face cards are not counted (note 10 is coded as 1)
    #return the integer scores for player 1, for player 2, the list of strings hands for player 1 and for player 2

    #example: superwar(deck) might return (95, 121, ['ac', '3h', '4d', 'js', '3d', '5d', '3c', 'kc', 'qh', 'jc', '9c', '8h', '7h', 
    #'ah', '5c', '4c', '2h', 'jh', 'kd', '1h', '5s', '8d', '5h', '7d', 'as', '7s'], ['3s', '9d', '6s', '1d', '1c', '9s', 'ad', 'kh', 
    #'jd', 'qs', '2d', '7c', '1s', 'qc', '9h', 'ks', '8s', 'qd', '2c', '2s', '4s', '8c', '6c', '6d', '4h', '6h'])

 
    #determine better hand - higher total sum of numbered cards wins - face cards (j,q,k,a) do not count
    
    p1 = []
    p2 = []
    p1_score = 0
    p2_score = 0
    i = 0
    
    while i < len(deck):
        if i % 2 != 0:
            p1.append(deck[i])
            i += 1
        else:
            p2.append(deck[i])
            i += 1
            
    for i in p1:
        if "2" in i:
            p1_score += 2
        elif "3" in i:
            p1_score += 3
        elif "4" in i:
            p1_score += 4
        elif "5" in i:
            p1_score += 5
        elif "6" in i:
            p1_score += 6
        elif "7" in i:
            p1_score += 7
        elif "8" in i:
            p1_score += 8
        elif "9" in i:
            p1_score += 9
        elif "1" in i:
            p1_score += 10
            
    for i in p2:
        if "2" in i:
            p2_score += 2
        elif "3" in i:
            p2_score += 3
        elif "4" in i:
            p2_score += 4
        elif "5" in i:
            p2_score += 5
        elif "6" in i:
            p2_score += 6
        elif "7" in i:
            p2_score += 7
        elif "8" in i:
            p2_score += 8
        elif "9" in i:
            p2_score += 9
        elif "1" in i:
            p2_score += 10
    
    return (p1_score, p2_score, p1, p2)

print(superwar(shuffle()))